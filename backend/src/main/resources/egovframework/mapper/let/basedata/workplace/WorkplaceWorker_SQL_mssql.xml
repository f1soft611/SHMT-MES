<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="WorkplaceWorkerDAO">

	<resultMap id="workplaceWorkerResult" type="egovframework.let.basedata.workplace.domain.model.WorkplaceWorker">
		<result property="workplaceWorkerId" column="WORKPLACE_WORKER_ID"/>
		<result property="workplaceId" column="WORKPLACE_ID"/>
		<result property="workerId" column="WORKER_ID"/>
		<result property="workerName" column="WORKER_NAME"/>
		<result property="position" column="POSITION"/>
		<result property="role" column="ROLE"/>
		<result property="useYn" column="USE_YN"/>
		<result property="regUserId" column="REG_USER_ID"/>
		<result property="regDt" column="REG_DT"/>
		<result property="updUserId" column="UPD_USER_ID"/>
		<result property="updDt" column="UPD_DT"/>
	</resultMap>

	<select id="WorkplaceWorkerDAO.selectWorkplaceWorkerList" parameterType="string" resultMap="workplaceWorkerResult">
		SELECT
			WORKPLACE_WORKER_ID,
			WORKPLACE_ID,
			WORKER_ID,
			WORKER_NAME,
			POSITION,
			ROLE,
			USE_YN,
			REG_USER_ID,
			CONVERT(VARCHAR(19), REG_DT, 120) AS REG_DT,
			UPD_USER_ID,
			CONVERT(VARCHAR(19), UPD_DT, 120) AS UPD_DT
		FROM TB_WORKPLACE_WORKER
		WHERE WORKPLACE_ID = #{workplaceId}
		  AND USE_YN = 'Y'
		ORDER BY
			CASE WHEN ROLE = 'LEADER' THEN 1 ELSE 2 END,
			REG_DT ASC
	</select>

	<select id="WorkplaceWorkerDAO.selectWorkplaceWorker" parameterType="string" resultMap="workplaceWorkerResult">
		SELECT
			WORKPLACE_WORKER_ID,
			WORKPLACE_ID,
			WORKER_ID,
			WORKER_NAME,
			POSITION,
			ROLE,
			USE_YN,
			REG_USER_ID,
			CONVERT(VARCHAR(19), REG_DT, 120) AS REG_DT,
			UPD_USER_ID,
			CONVERT(VARCHAR(19), UPD_DT, 120) AS UPD_DT
		FROM TB_WORKPLACE_WORKER
		WHERE WORKPLACE_WORKER_ID = #{workplaceWorkerId}
	</select>

	<insert id="WorkplaceWorkerDAO.insertWorkplaceWorker" parameterType="egovframework.let.basedata.workplace.domain.model.WorkplaceWorker">
		INSERT INTO TB_WORKPLACE_WORKER (
			WORKPLACE_WORKER_ID,
			WORKPLACE_ID,
			WORKER_ID,
			WORKER_NAME,
			POSITION,
			ROLE,
			USE_YN,
			REG_USER_ID,
			REG_DT
		) VALUES (
					 #{workplaceWorkerId},
					 #{workplaceId},
					 #{workerId},
					 #{workerName},
					 #{position},
					 ISNULL(#{role}, 'MEMBER'),
					 ISNULL(#{useYn}, 'Y'),
					 #{regUserId},
					 GETDATE()
				 )
	</insert>

	<update id="WorkplaceWorkerDAO.updateWorkplaceWorker" parameterType="egovframework.let.basedata.workplace.domain.model.WorkplaceWorker">
		UPDATE TB_WORKPLACE_WORKER
		SET
			WORKER_NAME = #{workerName},
			POSITION = #{position},
			ROLE = #{role},
			USE_YN = #{useYn},
			UPD_USER_ID = #{updUserId},
			UPD_DT = GETDATE()
		WHERE WORKPLACE_WORKER_ID = #{workplaceWorkerId}
	</update>

	<delete id="WorkplaceWorkerDAO.deleteWorkplaceWorker" parameterType="string">
		DELETE FROM TB_WORKPLACE_WORKER
		WHERE WORKPLACE_WORKER_ID = #{workplaceWorkerId}
	</delete>

	<!-- 작업장 삭제 시 모든 작업자 삭제 (물리적 삭제) -->
	<delete id="WorkplaceWorkerDAO.deleteWorkplaceWorkersByWorkplaceId" parameterType="string">
		DELETE FROM TB_WORKPLACE_WORKER
		WHERE WORKPLACE_ID = #{workplaceId}
	</delete>

	<!-- 논리적 삭제 (USE_YN = 'N'으로 변경) -->
	<update id="WorkplaceWorkerDAO.deleteWorkplaceWorkerLogical" parameterType="map">
		UPDATE TB_WORKPLACE_WORKER
		SET
			USE_YN = 'N',
			UPD_USER_ID = #{updUserId},
			UPD_DT = GETDATE()
		WHERE WORKPLACE_WORKER_ID = #{workplaceWorkerId}
	</update>

	<!-- 작업장별 작업자 중복 체크 -->
	<select id="WorkplaceWorkerDAO.selectWorkplaceWorkerDuplicateCheck" parameterType="map" resultType="int">
		SELECT COUNT(*) AS CNT
		FROM TB_WORKPLACE_WORKER
		WHERE WORKPLACE_ID = #{workplaceId}
		  AND WORKER_ID = #{workerId}
		  AND USE_YN = 'Y'
	</select>

	<!-- 작업장별 팀장 존재 여부 체크 -->
	<select id="WorkplaceWorkerDAO.selectWorkplaceLeaderCheck" parameterType="string" resultType="int">
		SELECT COUNT(*) AS CNT
		FROM TB_WORKPLACE_WORKER
		WHERE WORKPLACE_ID = #{workplaceId}
		  AND ROLE = 'LEADER'
		  AND USE_YN = 'Y'
	</select>

</mapper>