<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="authManageDAO">

    <!-- 메뉴 목록 조회 -->
    <select id="selectMenuList" parameterType="egovframework.let.uss.auth.service.MenuInfoVO" resultType="egovframework.let.uss.auth.service.MenuInfoVO">
        SELECT 
            m.MENU_ID as menuId,
            m.MENU_NM as menuNm,
            m.MENU_DC as menuDc,
            m.PARENT_MENU_ID as parentMenuId,
            m.MENU_ORDR as menuOrdr,
            m.MENU_URL as menuUrl,
            m.ICON_NM as iconNm,
            m.USE_AT as useAt,
            m.CRT_DT as frstRegistPnttm,
            m.CRT_ID as frstRegisterId,
            m.UPD_DT as lastUpdtPnttm,
            m.UPD_ID as lastUpdusrId,
            p.MENU_NM as parentMenuNm,
            CASE WHEN EXISTS (SELECT 1 FROM MES_MENU_INFO c WHERE c.PARENT_MENU_ID = m.MENU_ID) THEN 1 ELSE 0 END as hasChildren
        FROM MES_MENU_INFO m
        LEFT JOIN MES_MENU_INFO p ON m.PARENT_MENU_ID = p.MENU_ID
        WHERE 1=1
        <if test="menuNm != null and menuNm != ''">
            AND m.MENU_NM LIKE CONCAT('%', #{menuNm}, '%')
        </if>
        <if test="parentMenuId != null and parentMenuId != ''">
            AND m.PARENT_MENU_ID = #{parentMenuId}
        </if>
        ORDER BY m.PARENT_MENU_ID, m.MENU_ORDR, m.MENU_ID
    </select>

    <!-- 메뉴 상세 조회 -->
    <select id="selectMenuDetail" parameterType="egovframework.let.uss.auth.service.MenuInfoVO" resultType="egovframework.let.uss.auth.service.MenuInfoVO">
        SELECT 
            m.MENU_ID as menuId,
            m.MENU_NM as menuNm,
            m.MENU_DC as menuDc,
            m.PARENT_MENU_ID as parentMenuId,
            m.MENU_ORDR as menuOrdr,
            m.MENU_URL as menuUrl,
            m.ICON_NM as iconNm,
            m.USE_AT as useAt,
            m.CRT_DT as frstRegistPnttm,
            m.CRT_ID as frstRegisterId,
            m.UPD_DT as lastUpdtPnttm,
            m.UPD_ID as lastUpdusrId,
            p.MENU_NM as parentMenuNm
        FROM MES_MENU_INFO m
        LEFT JOIN MES_MENU_INFO p ON m.PARENT_MENU_ID = p.MENU_ID
        WHERE m.MENU_ID = #{menuId}
        ORDER BY m.PARENT_MENU_ID, m.MENU_ORDR, m.MENU_ID
    </select>

    <!-- 메뉴 등록 -->
    <insert id="insertMenu" parameterType="egovframework.let.uss.auth.service.MenuInfoVO">
        INSERT INTO MES_MENU_INFO (
            MENU_ID,
            MENU_NM,
            MENU_DC,
            PARENT_MENU_ID,
            MENU_ORDR,
            MENU_URL,
            ICON_NM,
            USE_AT,
            CRT_DT,
            CRT_ID,
            UPD_DT,
            UPD_ID
        ) VALUES (
            #{menuId},
            #{menuNm},
            #{menuDc},
            <if test="parentMenuId != null and parentMenuId != ''">#{parentMenuId}</if>
            <if test="parentMenuId == null or parentMenuId == ''">NULL</if>,
            #{menuOrdr},
            #{menuUrl},
            #{iconNm},
            #{useAt},
            GETDATE(),
            #{frstRegisterId},
            GETDATE(),
            #{lastUpdusrId}
        )
    </insert>

    <!-- 메뉴 수정 -->
    <update id="updateMenu" parameterType="egovframework.let.uss.auth.service.MenuInfoVO">
        UPDATE MES_MENU_INFO SET
            MENU_NM = #{menuNm},
            MENU_DC = #{menuDc},
            PARENT_MENU_ID = <if test="parentMenuId != null and parentMenuId != ''">#{parentMenuId}</if>
                             <if test="parentMenuId == null or parentMenuId == ''">NULL</if>,
            MENU_ORDR = #{menuOrdr},
            MENU_URL = #{menuUrl},
            ICON_NM = #{iconNm},
            USE_AT = #{useAt},
            UPD_DT = GETDATE(),
            UPD_ID = #{lastUpdusrId}
        WHERE MENU_ID = #{menuId}
    </update>

    <!-- 메뉴 삭제 -->
    <delete id="deleteMenu" parameterType="egovframework.let.uss.auth.service.MenuInfoVO">
        DELETE FROM MES_MENU_INFO
        WHERE MENU_ID = #{menuId}
    </delete>

    <!-- 권한 유형 목록 조회 -->
    <select id="selectPermissionTypeList" parameterType="egovframework.let.uss.auth.service.PermissionTypeVO" resultType="egovframework.let.uss.auth.service.PermissionTypeVO">
        SELECT 
            PERMISSION_ID as permissionId,
            PERMISSION_NM as permissionNm,
            PERMISSION_DC as permissionDc,
            PERMISSION_LEVEL as permissionLevel,
            USE_AT as useAt,
            CRT_DT as frstRegistPnttm,
            CRT_ID as frstRegisterId,
            UPD_DT as lastUpdtPnttm,
            UPD_ID as lastUpdusrId
        FROM MES_PERMISSION_TYPE
        WHERE USE_AT = 'Y'
        <if test="permissionNm != null and permissionNm != ''">
            AND PERMISSION_NM LIKE CONCAT('%', #{permissionNm}, '%')
        </if>
        <if test="permissionLevel != null and permissionLevel != ''">
            AND PERMISSION_LEVEL = #{permissionLevel}
        </if>
        ORDER BY PERMISSION_LEVEL, PERMISSION_ID
    </select>

    <!-- 권한 유형 등록 -->
    <insert id="insertPermissionType" parameterType="egovframework.let.uss.auth.service.PermissionTypeVO">
        INSERT INTO MES_PERMISSION_TYPE (
            PERMISSION_ID,
            PERMISSION_NM,
            PERMISSION_DC,
            PERMISSION_LEVEL,
            USE_AT,
            CRT_DT,
            CRT_ID,
            UPD_DT,
            UPD_ID
        ) VALUES (
            #{permissionId},
            #{permissionNm},
            #{permissionDc},
            #{permissionLevel},
            #{useAt},
            GETDATE(),
            #{frstRegisterId},
            GETDATE(),
            #{lastUpdusrId}
        )
    </insert>

    <!-- 역할별 메뉴 권한 목록 조회 -->
    <select id="selectRoleMenuPermissionList" parameterType="egovframework.let.uss.auth.service.RoleMenuPermissionVO" resultType="egovframework.let.uss.auth.service.RoleMenuPermissionVO">
        WITH MenuTree AS (
            SELECT
                m.MENU_ID,
                m.PARENT_MENU_ID,
                m.MENU_NM,
                m.MENU_ORDR,
                CAST(RIGHT('00000' + CAST(m.MENU_ORDR AS VARCHAR), 5) AS VARCHAR(MAX)) AS SORT_PATH,
                1 AS DEPTH
            FROM MES_MENU_INFO m
            WHERE m.PARENT_MENU_ID IS NULL
            UNION ALL
            SELECT
                c.MENU_ID,
                c.PARENT_MENU_ID,
                c.MENU_NM,
                c.MENU_ORDR,
                mt.SORT_PATH + '-' + RIGHT('00000' + CAST(c.MENU_ORDR AS VARCHAR), 5),
                mt.DEPTH + 1
            FROM MES_MENU_INFO c
                INNER JOIN MenuTree mt ON c.PARENT_MENU_ID = mt.MENU_ID
        )
        SELECT
            rmp.RMP_ID as roleMenuId,
            rmp.GROUP_ID as groupId,
            rmp.MENU_ID as menuId,
            rmp.PERMISSION_ID as permissionId,
            rmp.USE_AT as useAt,
            rmp.CRT_DT as frstRegistPnttm,
            rmp.CRT_ID as frstRegisterId,
            rmp.UPD_DT as lastUpdtPnttm,
            rmp.UPD_ID as lastUpdusrId,
            g.GROUP_NM as groupNm,
            mt.MENU_NM as menuNm,
            m.MENU_URL as menuUrl,
            p.PERMISSION_NM as permissionNm,
            p.PERMISSION_LEVEL as permissionLevel
        FROM MES_ROLE_MENU_PERMISSION rmp
            LEFT JOIN MES_GROUP_INFO g ON rmp.GROUP_ID = g.GROUP_ID
            LEFT JOIN MenuTree mt ON rmp.MENU_ID = mt.MENU_ID
            LEFT JOIN MES_MENU_INFO m ON rmp.MENU_ID = m.MENU_ID
            LEFT JOIN MES_PERMISSION_TYPE p ON rmp.PERMISSION_ID = p.PERMISSION_ID
        WHERE rmp.USE_AT = 'Y'
        <if test="groupId != null and groupId != ''">
            AND rmp.GROUP_ID = #{groupId}
        </if>
        <if test="menuId != null and menuId != ''">
            AND rmp.MENU_ID = #{menuId}
        </if>
        <if test="permissionId != null and permissionId != ''">
            AND rmp.PERMISSION_ID = #{permissionId}
        </if>
        ORDER BY mt.SORT_PATH
    </select>

    <!-- 역할별 메뉴 권한 등록 -->
    <insert id="insertRoleMenuPermission" parameterType="egovframework.let.uss.auth.service.RoleMenuPermissionVO">
        INSERT INTO MES_ROLE_MENU_PERMISSION (
            GROUP_ID,
            MENU_ID,
            PERMISSION_ID,
            USE_AT,
            CRT_DT,
            CRT_ID,
            UPD_DT,
            UPD_ID
        ) VALUES (
            #{groupId},
            #{menuId},
            #{permissionId},
            #{useAt},
            GETDATE(),
            #{frstRegisterId},
            GETDATE(),
            #{lastUpdusrId}
        )
    </insert>

    <!-- 역할별 메뉴 권한 삭제 -->
    <delete id="deleteRoleMenuPermission" parameterType="egovframework.let.uss.auth.service.RoleMenuPermissionVO">
        DELETE FROM MES_ROLE_MENU_PERMISSION
        WHERE GROUP_ID = #{groupId}
        AND MENU_ID = #{menuId}
        <if test="permissionId != null and permissionId != ''">
            AND PERMISSION_ID = #{permissionId}
        </if>
    </delete>

    <!-- 사용자별 접근 가능한 메뉴 목록 조회 -->
    <select id="selectUserAccessibleMenus" parameterType="string" resultType="egovframework.let.uss.auth.service.MenuInfoVO">
        SELECT DISTINCT
            m.MENU_ID as menuId,
            m.MENU_NM as menuNm,
            m.MENU_DC as menuDc,
            m.PARENT_MENU_ID as parentMenuId,
            m.MENU_ORDR as menuOrdr,
            m.MENU_URL as menuUrl,
            m.ICON_NM as iconNm,
            m.USE_AT as useAt,
            CASE WHEN MAX(p.PERMISSION_LEVEL) = 'write' THEN 'write' ELSE 'read' END as permissionLevel,
            1 as accessible
        FROM MES_MENU_INFO m
        INNER JOIN MES_ROLE_MENU_PERMISSION rmp ON m.MENU_ID = rmp.MENU_ID
        INNER JOIN MES_PERMISSION_TYPE p ON rmp.PERMISSION_ID = p.PERMISSION_ID
        WHERE m.USE_AT = 'Y'
        AND rmp.USE_AT = 'Y'
        AND p.USE_AT = 'Y'
        AND rmp.GROUP_ID = #{groupId}
        GROUP BY m.MENU_ID, m.MENU_NM, m.MENU_DC, m.PARENT_MENU_ID, m.MENU_ORDR, m.MENU_URL, m.ICON_NM, m.USE_AT
        ORDER BY m.PARENT_MENU_ID, m.MENU_ORDR, m.MENU_ID
    </select>

    <!-- 특정 메뉴에 대한 사용자 권한 확인 -->
    <select id="checkUserMenuPermission" parameterType="map" resultType="string">
        SELECT CASE WHEN MAX(p.PERMISSION_LEVEL) = 'write' THEN 'write'
                    WHEN MAX(p.PERMISSION_LEVEL) = 'read' THEN 'read'
                    ELSE 'none' END as permissionLevel
        FROM MES_ROLE_MENU_PERMISSION rmp
        INNER JOIN MES_MENU_INFO m ON rmp.MENU_ID = m.MENU_ID
        INNER JOIN MES_PERMISSION_TYPE p ON rmp.PERMISSION_ID = p.PERMISSION_ID
        WHERE rmp.GROUP_ID = #{groupId}
        AND m.MENU_URL = #{menuUrl}
        AND rmp.USE_AT = 'Y'
        AND m.USE_AT = 'Y'
        AND p.USE_AT = 'Y'
        ORDER BY m.PARENT_MENU_ID, m.MENU_ORDR, m.MENU_ID
    </select>

</mapper>