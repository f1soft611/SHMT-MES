<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="SchedulerConfigDAO">

    <!-- 스케쥴러 설정 resultMap -->
    <resultMap id="schedulerConfigResultMap" type="egovframework.let.scheduler.model.SchedulerConfig">
        <result property="schedulerId" column="scheduler_id"/>
        <result property="schedulerName" column="scheduler_name"/>
        <result property="schedulerDescription" column="scheduler_description"/>
        <result property="cronExpression" column="cron_expression"/>
        <result property="jobClassName" column="job_class_name"/>
        <result property="isEnabled" column="is_enabled"/>
        <result property="createdDate" column="created_date"/>
        <result property="createdBy" column="created_by"/>
        <result property="updatedDate" column="updated_date"/>
        <result property="updatedBy" column="updated_by"/>
    </resultMap>

    <resultMap id="schedulerConfigVOResultMap" type="egovframework.let.scheduler.model.SchedulerConfigVO">
        <result property="schedulerId" column="scheduler_id"/>
        <result property="schedulerName" column="scheduler_name"/>
        <result property="schedulerDescription" column="scheduler_description"/>
        <result property="cronExpression" column="cron_expression"/>
        <result property="jobClassName" column="job_class_name"/>
        <result property="isEnabled" column="is_enabled"/>
        <result property="createdDate" column="created_date"/>
        <result property="createdBy" column="created_by"/>
        <result property="updatedDate" column="updated_date"/>
        <result property="updatedBy" column="updated_by"/>
    </resultMap>

    <!-- 스케쥴러 목록 조회 -->
    <select id="selectSchedulerList" resultMap="schedulerConfigVOResultMap" 
            parameterType="egovframework.let.scheduler.model.SchedulerConfigVO">
        SELECT
            scheduler_id,
            scheduler_name,
            scheduler_description,
            cron_expression,
            job_class_name,
            is_enabled,
            created_date,
            created_by,
            updated_date,
            updated_by
        FROM scheduler_config
        WHERE 1=1
        <if test="searchWrd != null and searchWrd != ''">
            AND (scheduler_name LIKE CONCAT('%', #{searchWrd}, '%')
                 OR scheduler_description LIKE CONCAT('%', #{searchWrd}, '%'))
        </if>
        <if test="isEnabled != null and isEnabled != ''">
            AND is_enabled = #{isEnabled}
        </if>
        ORDER BY scheduler_id DESC
        <if test="firstIndex != null and recordCountPerPage != null">
            LIMIT #{firstIndex}, #{recordCountPerPage}
        </if>
    </select>

    <!-- 스케쥴러 총 개수 조회 -->
    <select id="selectSchedulerListCnt" resultType="int" 
            parameterType="egovframework.let.scheduler.model.SchedulerConfigVO">
        SELECT COUNT(*)
        FROM scheduler_config
        WHERE 1=1
        <if test="searchWrd != null and searchWrd != ''">
            AND (scheduler_name LIKE CONCAT('%', #{searchWrd}, '%')
                 OR scheduler_description LIKE CONCAT('%', #{searchWrd}, '%'))
        </if>
        <if test="isEnabled != null and isEnabled != ''">
            AND is_enabled = #{isEnabled}
        </if>
    </select>

    <!-- 스케쥴러 상세 조회 -->
    <select id="selectSchedulerDetail" resultMap="schedulerConfigResultMap" parameterType="long">
        SELECT
            scheduler_id,
            scheduler_name,
            scheduler_description,
            cron_expression,
            job_class_name,
            is_enabled,
            created_date,
            created_by,
            updated_date,
            updated_by
        FROM scheduler_config
        WHERE scheduler_id = #{schedulerId}
    </select>

    <!-- 스케쥴러 등록 -->
    <insert id="insertScheduler" parameterType="egovframework.let.scheduler.model.SchedulerConfig"
            useGeneratedKeys="true" keyProperty="schedulerId">
        INSERT INTO scheduler_config (
            scheduler_name,
            scheduler_description,
            cron_expression,
            job_class_name,
            is_enabled,
            created_date,
            created_by
        ) VALUES (
            #{schedulerName},
            #{schedulerDescription},
            #{cronExpression},
            #{jobClassName},
            #{isEnabled},
            NOW(),
            #{createdBy}
        )
    </insert>

    <!-- 스케쥴러 수정 -->
    <update id="updateScheduler" parameterType="egovframework.let.scheduler.model.SchedulerConfig">
        UPDATE scheduler_config
        SET scheduler_name = #{schedulerName},
            scheduler_description = #{schedulerDescription},
            cron_expression = #{cronExpression},
            job_class_name = #{jobClassName},
            is_enabled = #{isEnabled},
            updated_date = NOW(),
            updated_by = #{updatedBy}
        WHERE scheduler_id = #{schedulerId}
    </update>

    <!-- 스케쥴러 삭제 -->
    <delete id="deleteScheduler" parameterType="long">
        DELETE FROM scheduler_config
        WHERE scheduler_id = #{schedulerId}
    </delete>

    <!-- 활성화된 스케쥴러 목록 조회 -->
    <select id="selectEnabledSchedulers" resultMap="schedulerConfigResultMap">
        SELECT
            scheduler_id,
            scheduler_name,
            scheduler_description,
            cron_expression,
            job_class_name,
            is_enabled,
            created_date,
            created_by,
            updated_date,
            updated_by
        FROM scheduler_config
        WHERE is_enabled = 'Y'
        ORDER BY scheduler_id
    </select>

</mapper>
